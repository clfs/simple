package movegen

import (
	"fmt"
	"testing"

	"github.com/clfs/simple/core"
	"github.com/clfs/simple/encoding/fen"
	"github.com/clfs/simple/encoding/pcn"
	"github.com/google/go-cmp/cmp"
)

func TestPerft(t *testing.T) {
	cases := []struct {
		in   string
		want []int
	}{
		{
			fen.Starting,
			[]int{1, 20, 400, 8902, 197281},
		},
		{
			// https://www.chessprogramming.org/Perft_Results#Position_2
			"r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/R3K2R w KQkq - 0 1",
			[]int{1, 48, 2039, 97862},
		},
		{
			// https://www.chessprogramming.org/Perft_Results#Position_3
			"8/2p5/3p4/KP5r/1R3p1k/8/4P1P1/8 w - - 0 1",
			[]int{1, 14, 191, 2812, 43238},
		},
		{
			// https://www.chessprogramming.org/Perft_Results#Position_4
			"r3k2r/Pppp1ppp/1b3nbN/nP6/BBP1P3/q4N2/Pp1P2PP/R2Q1RK1 w kq - 0 1",
			[]int{1, 6, 264, 9467, 422333},
		},
		{
			// https://www.chessprogramming.org/Perft_Results#Position_5
			"rnbq1k1r/pp1Pbppp/2p5/8/2B5/8/PPP1NnPP/RNBQK2R w KQ - 1 8",
			[]int{1, 44, 1486, 62379},
		},
		{
			// https://www.chessprogramming.org/Perft_Results#Position_6
			"r4rk1/1pp1qppp/p1np1n2/2b1p1B1/2B1P1b1/P1NP1N2/1PP1QPPP/R4RK1 w - - 0 10",
			[]int{1, 46, 2079, 89890},
		},
	}

	for _, tc := range cases {
		p := fen.MustDecode(tc.in)
		for i, want := range tc.want {
			if got := Perft(p, i); got != want {
				t.Errorf("%q at depth %d: got %d, want %d", tc.in, i, got, want)
			}
		}
	}
}

func TestPerft_NegativeDepth(t *testing.T) {
	p := core.NewPosition()
	if got := Perft(p, -1); got != 0 {
		t.Errorf("depth -1: got %d, want 0", got)
	}
}

// encodeMoves encodes moves as a sorted slice of PCN strings.
func encodeMoveMap(t *testing.T, m map[core.Move]int) map[string]int {
	t.Helper()
	res := make(map[string]int, len(m))
	for move, count := range m {
		res[pcn.Encode(move)] = count
	}
	return res
}

func TestDivide(t *testing.T) {
	cases := []struct {
		in    string
		depth int
		want  map[string]int
	}{
		{
			"r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/R3K2R w KQkq - 0 1",
			1,
			map[string]int{
				"a1b1": 1,
				"a1c1": 1,
				"a1d1": 1,
				"a2a3": 1,
				"a2a4": 1,
				"b2b3": 1,
				"c3a4": 1,
				"c3b1": 1,
				"c3b5": 1,
				"c3d1": 1,
				"d2c1": 1,
				"d2e3": 1,
				"d2f4": 1,
				"d2g5": 1,
				"d2h6": 1,
				"d5d6": 1,
				"d5e6": 1,
				"e1c1": 1,
				"e1d1": 1,
				"e1f1": 1,
				"e1g1": 1,
				"e2a6": 1,
				"e2b5": 1,
				"e2c4": 1,
				"e2d1": 1,
				"e2d3": 1,
				"e2f1": 1,
				"e5c4": 1,
				"e5c6": 1,
				"e5d3": 1,
				"e5d7": 1,
				"e5f7": 1,
				"e5g4": 1,
				"e5g6": 1,
				"f3d3": 1,
				"f3e3": 1,
				"f3f4": 1,
				"f3f5": 1,
				"f3f6": 1,
				"f3g3": 1,
				"f3g4": 1,
				"f3h3": 1,
				"f3h5": 1,
				"g2g3": 1,
				"g2g4": 1,
				"g2h3": 1,
				"h1f1": 1,
				"h1g1": 1,
			},
		},
		{
			"r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/R3K2R w KQkq - 0 1",
			2,
			map[string]int{
				"a1b1": 43,
				"a1c1": 43,
				"a1d1": 43,
				"a2a3": 44,
				"a2a4": 44,
				"b2b3": 42,
				"c3a4": 42,
				"c3b1": 42,
				"c3b5": 39,
				"c3d1": 42,
				"d2c1": 43,
				"d2e3": 43,
				"d2f4": 43,
				"d2g5": 42,
				"d2h6": 41,
				"d5d6": 41,
				"d5e6": 46,
				"e1c1": 43,
				"e1d1": 43,
				"e1f1": 43,
				"e1g1": 43,
				"e2a6": 36,
				"e2b5": 39,
				"e2c4": 41,
				"e2d1": 44,
				"e2d3": 42,
				"e2f1": 44,
				"e5c4": 42,
				"e5c6": 41,
				"e5d3": 43,
				"e5d7": 45,
				"e5f7": 44,
				"e5g4": 44,
				"e5g6": 42,
				"f3d3": 42,
				"f3e3": 43,
				"f3f4": 43,
				"f3f5": 45,
				"f3f6": 39,
				"f3g3": 43,
				"f3g4": 43,
				"f3h3": 43,
				"f3h5": 43,
				"g2g3": 42,
				"g2g4": 42,
				"g2h3": 43,
				"h1f1": 43,
				"h1g1": 43,
			},
		},
		{
			"r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/R3K2R w KQkq - 0 1",
			3,
			map[string]int{
				"a1b1": 1969,
				"a1c1": 1968,
				"a1d1": 1885,
				"a2a3": 2186,
				"a2a4": 2149,
				"b2b3": 1964,
				"c3a4": 2203,
				"c3b1": 2038,
				"c3b5": 2138,
				"c3d1": 2040,
				"d2c1": 1963,
				"d2e3": 2136,
				"d2f4": 2000,
				"d2g5": 2134,
				"d2h6": 2019,
				"d5d6": 1991,
				"d5e6": 2241,
				"e1c1": 1887,
				"e1d1": 1894,
				"e1f1": 1855,
				"e1g1": 2059,
				"e2a6": 1907,
				"e2b5": 2057,
				"e2c4": 2082,
				"e2d1": 1733,
				"e2d3": 2050,
				"e2f1": 2060,
				"e5c4": 1880,
				"e5c6": 2027,
				"e5d3": 1803,
				"e5d7": 2124,
				"e5f7": 2080,
				"e5g4": 1878,
				"e5g6": 1997,
				"f3d3": 2005,
				"f3e3": 2174,
				"f3f4": 2132,
				"f3f5": 2396,
				"f3f6": 2111,
				"f3g3": 2214,
				"f3g4": 2169,
				"f3h3": 2360,
				"f3h5": 2267,
				"g2g3": 1882,
				"g2g4": 1843,
				"g2h3": 1970,
				"h1f1": 1929,
				"h1g1": 2013,
			},
		},
		{
			"r3k2r/p1pNqpb1/bn2pnp1/3P4/1p2P3/2N2Q1p/PPPBBPPP/R3K2R b KQkq - 0 1",
			1,
			map[string]int{
				"a6b5": 1,
				"a6b7": 1,
				"a6c4": 1,
				"a6c8": 1,
				"a6d3": 1,
				"a6e2": 1,
				"a8b8": 1,
				"a8c8": 1,
				"a8d8": 1,
				"b4b3": 1,
				"b4c3": 1,
				"b6a4": 1,
				"b6c4": 1,
				"b6c8": 1,
				"b6d5": 1,
				"b6d7": 1,
				"c7c5": 1,
				"c7c6": 1,
				"e6d5": 1,
				"e6e5": 1,
				"e7c5": 1,
				"e7d6": 1,
				"e7d7": 1,
				"e7d8": 1,
				"e7f8": 1,
				"e8c8": 1,
				"e8d7": 1,
				"e8d8": 1,
				"f6d5": 1,
				"f6d7": 1,
				"f6e4": 1,
				"f6g4": 1,
				"f6g8": 1,
				"f6h5": 1,
				"f6h7": 1,
				"g6g5": 1,
				"g7f8": 1,
				"g7h6": 1,
				"h3g2": 1,
				"h8f8": 1,
				"h8g8": 1,
				"h8h4": 1,
				"h8h5": 1,
				"h8h6": 1,
				"h8h7": 1,
			},
		},
		{
			"r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/1R2K2R b Kkq - 1 1",
			1,
			map[string]int{
				"a6b5": 1,
				"a6b7": 1,
				"a6c4": 1,
				"a6c8": 1,
				"a6d3": 1,
				"a6e2": 1,
				"a8b8": 1,
				"a8c8": 1,
				"a8d8": 1,
				"b4b3": 1,
				"b4c3": 1,
				"b6a4": 1,
				"b6c4": 1,
				"b6c8": 1,
				"b6d5": 1,
				"c7c5": 1,
				"c7c6": 1,
				"d7d6": 1,
				"e6d5": 1,
				"e7c5": 1,
				"e7d6": 1,
				"e7d8": 1,
				"e7f8": 1,
				"e8c8": 1,
				"e8d8": 1,
				"e8f8": 1,
				"e8g8": 1,
				"f6d5": 1,
				"f6e4": 1,
				"f6g4": 1,
				"f6g8": 1,
				"f6h5": 1,
				"f6h7": 1,
				"g6g5": 1,
				"g7f8": 1,
				"g7h6": 1,
				"h3g2": 1,
				"h8f8": 1,
				"h8g8": 1,
				"h8h4": 1,
				"h8h5": 1,
				"h8h6": 1,
				"h8h7": 1,
			},
		},
		{
			"r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/1R2K2R b Kkq - 1 1",
			2,
			map[string]int{
				"a6b5": 45,
				"a6b7": 46,
				"a6c4": 44,
				"a6c8": 46,
				"a6d3": 44,
				"a6e2": 40,
				"a8b8": 46,
				"a8c8": 46,
				"a8d8": 46,
				"b4b3": 47,
				"b4c3": 47,
				"b6a4": 45,
				"b6c4": 44,
				"b6c8": 46,
				"b6d5": 46,
				"c7c5": 47,
				"c7c6": 47,
				"d7d6": 45,
				"e6d5": 46,
				"e7c5": 46,
				"e7d6": 45,
				"e7d8": 46,
				"e7f8": 46,
				"e8c8": 46,
				"e8d8": 46,
				"e8f8": 46,
				"e8g8": 46,
				"f6d5": 47,
				"f6e4": 49,
				"f6g4": 45,
				"f6g8": 47,
				"f6h5": 47,
				"f6h7": 47,
				"g6g5": 45,
				"g7f8": 46,
				"g7h6": 46,
				"h3g2": 44,
				"h8f8": 46,
				"h8g8": 46,
				"h8h4": 46,
				"h8h5": 46,
				"h8h6": 46,
				"h8h7": 46,
			},
		},
		{
			"r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q2/PPPBBPpP/1R2K2R w Kkq - 0 2",
			1,
			map[string]int{
				"a2a3": 1,
				"a2a4": 1,
				"b1a1": 1,
				"b1c1": 1,
				"b1d1": 1,
				"b2b3": 1,
				"c3a4": 1,
				"c3b5": 1,
				"c3d1": 1,
				"d2c1": 1,
				"d2e3": 1,
				"d2f4": 1,
				"d2g5": 1,
				"d2h6": 1,
				"d5d6": 1,
				"d5e6": 1,
				"e1d1": 1,
				"e2a6": 1,
				"e2b5": 1,
				"e2c4": 1,
				"e2d1": 1,
				"e2d3": 1,
				"e2f1": 1,
				"e5c4": 1,
				"e5c6": 1,
				"e5d3": 1,
				"e5d7": 1,
				"e5f7": 1,
				"e5g4": 1,
				"e5g6": 1,
				"f3d3": 1,
				"f3e3": 1,
				"f3f4": 1,
				"f3f5": 1,
				"f3f6": 1,
				"f3g2": 1,
				"f3g3": 1,
				"f3g4": 1,
				"f3h3": 1,
				"f3h5": 1,
				"h1f1": 1,
				"h1g1": 1,
				"h2h3": 1,
				"h2h4": 1,
			},
		},
		{
			"r3k2r/Pppp1ppp/1b3nbN/nP6/BBP1P3/q4N2/Pp1P2PP/R2Q1RK1 w kq - 0 1",
			3,
			map[string]int{
				"b4c5": 1352,
				"c4c5": 1409,
				"d2d4": 1643,
				"f1f2": 1623,
				"f3d4": 1687,
				"g1h1": 1753,
			},
		},
		{
			"r3k2r/Pppp1ppp/1b3nbN/nPB5/B1P1P3/q4N2/Pp1P2PP/R2Q1RK1 b kq - 1 1",
			2,
			map[string]int{
				"a3a2":  35,
				"a3a4":  34,
				"a3b3":  35,
				"a3b4":  35,
				"a3c3":  36,
				"a3c5":  4,
				"a3d3":  33,
				"a3e3":  4,
				"a3f3":  32,
				"a5b3":  34,
				"a5c4":  34,
				"a5c6":  35,
				"a8a7":  34,
				"a8b8":  42,
				"a8c8":  38,
				"a8d8":  38,
				"b2a1b": 33,
				"b2a1n": 33,
				"b2a1q": 33,
				"b2a1r": 33,
				"b2b1b": 33,
				"b2b1n": 33,
				"b2b1q": 33,
				"b2b1r": 33,
				"b6a7":  36,
				"b6c5":  4,
				"c7c6":  35,
				"d7d5":  36,
				"d7d6":  34,
				"e8c8":  38,
				"e8d8":  34,
				"f6d5":  36,
				"f6e4":  32,
				"f6g4":  32,
				"f6g8":  34,
				"f6h5":  34,
				"g6e4":  33,
				"g6f5":  35,
				"g6h5":  34,
				"g7h6":  30,
				"h8f8":  34,
				"h8g8":  34,
			},
		},
		{
			"r3k2r/Pppp1ppp/1b3nbN/nPB5/B1P1P3/q4N2/P2P2PP/b2Q1RK1 w kq - 0 2",
			1,
			map[string]int{
				"a4b3": 1,
				"a4c2": 1,
				"c5b6": 1,
				"c5d4": 1,
				"c5e3": 1,
				"c5f2": 1,
				"d1a1": 1,
				"d1b1": 1,
				"d1b3": 1,
				"d1c1": 1,
				"d1c2": 1,
				"d1e1": 1,
				"d1e2": 1,
				"d2d3": 1,
				"d2d4": 1,
				"e4e5": 1,
				"f1e1": 1,
				"f1f2": 1,
				"f3d4": 1,
				"f3e1": 1,
				"f3e5": 1,
				"f3g5": 1,
				"f3h4": 1,
				"g1f2": 1,
				"g1h1": 1,
				"g2g3": 1,
				"g2g4": 1,
				"h2h3": 1,
				"h2h4": 1,
				"h6f5": 1,
				"h6f7": 1,
				"h6g4": 1,
				"h6g8": 1,
			},
		},
		{
			"rnbq1k1r/pp1Pbppp/2p5/8/2B5/8/PPP1NnPP/RNBQK2R w KQ - 1 8",
			3,
			map[string]int{
				"a2a3":  1373,
				"a2a4":  1433,
				"b1a3":  1303,
				"b1c3":  1467,
				"b1d2":  1174,
				"b2b3":  1368,
				"b2b4":  1398,
				"c1d2":  1368,
				"c1e3":  1587,
				"c1f4":  1552,
				"c1g5":  1422,
				"c1h6":  1312,
				"c2c3":  1440,
				"c4a6":  1256,
				"c4b3":  1275,
				"c4b5":  1332,
				"c4d3":  1269,
				"c4d5":  1375,
				"c4e6":  1438,
				"c4f7":  1328,
				"d1d2":  1436,
				"d1d3":  1685,
				"d1d4":  1751,
				"d1d5":  1688,
				"d1d6":  1500,
				"d7c8b": 1668,
				"d7c8n": 1607,
				"d7c8q": 1459,
				"d7c8r": 1296,
				"e1d2":  978,
				"e1f1":  1445,
				"e1f2":  1269,
				"e1g1":  1376,
				"e2c3":  1595,
				"e2d4":  1554,
				"e2f4":  1555,
				"e2g1":  1431,
				"e2g3":  1523,
				"g2g3":  1308,
				"g2g4":  1337,
				"h1f1":  1364,
				"h1g1":  1311,
				"h2h3":  1371,
				"h2h4":  1402,
			},
		},
		{
			"rnbq1k1r/pp1Pbppp/2p5/8/2B5/P7/1PP1NnPP/RNBQK2R b KQ - 0 8",
			2,
			map[string]int{
				"a7a5": 44,
				"a7a6": 44,
				"b7b5": 43,
				"b7b6": 44,
				"b8a6": 44,
				"b8d7": 41,
				"c6c5": 44,
				"c8d7": 41,
				"d8a5": 9,
				"d8b6": 47,
				"d8c7": 48,
				"d8d7": 40,
				"d8e8": 52,
				"e7a3": 46,
				"e7b4": 9,
				"e7c5": 43,
				"e7d6": 44,
				"e7f6": 44,
				"e7g5": 42,
				"e7h4": 42,
				"f2d1": 39,
				"f2d3": 5,
				"f2e4": 42,
				"f2g4": 42,
				"f2h1": 40,
				"f2h3": 41,
				"f7f5": 45,
				"f7f6": 45,
				"f8g8": 44,
				"g7g5": 43,
				"g7g6": 44,
				"h7h5": 44,
				"h7h6": 44,
				"h8g8": 44,
			},
		},
		{
			"rnbq1k1r/pp1Pbppp/2p5/8/2B5/P7/1PP1N1PP/RNBQK2n w Q - 0 9",
			1,
			map[string]int{
				"b2b3":  1,
				"c2c3":  1,
				"g2g3":  1,
				"h2h3":  1,
				"a3a4":  1,
				"b2b4":  1,
				"g2g4":  1,
				"h2h4":  1,
				"d7c8q": 1,
				"d7c8r": 1,
				"d7c8b": 1,
				"d7c8n": 1,
				"b1d2":  1,
				"b1c3":  1,
				"e2g1":  1,
				"e2c3":  1,
				"e2g3":  1,
				"e2d4":  1,
				"e2f4":  1,
				"c1d2":  1,
				"c1e3":  1,
				"c1f4":  1,
				"c1g5":  1,
				"c1h6":  1,
				"c4a2":  1,
				"c4b3":  1,
				"c4d3":  1,
				"c4b5":  1,
				"c4d5":  1,
				"c4a6":  1,
				"c4e6":  1,
				"c4f7":  1,
				"a1a2":  1,
				"d1d2":  1,
				"d1d3":  1,
				"d1d4":  1,
				"d1d5":  1,
				"d1d6":  1,
				"e1f1":  1,
				"e1d2":  1,
			},
		},
		{
			"r3k2r/Pppp1ppp/1b3nbN/nP6/BBP1P3/q4N2/Pp1P2PP/R2Q1RK1 w kq - 0 1",
			4,
			map[string]int{
				"b4c5": 58167,
				"c4c5": 60769,
				"d2d4": 72051,
				"f1f2": 73972,
				"f3d4": 75736,
				"g1h1": 81638,
			},
		},
		{
			"r3k2r/Pppp1ppp/1b3nbN/nPB5/B1P1P3/q4N2/Pp1P2PP/R2Q1RK1 b kq - 1 1",
			3,
			map[string]int{
				"a3a2":  1367,
				"a3a4":  1396,
				"a3b3":  1527,
				"a3b4":  1463,
				"a3c3":  1624,
				"a3c5":  197,
				"a3d3":  1596,
				"a3e3":  168,
				"a3f3":  1552,
				"a5b3":  1408,
				"a5c4":  1561,
				"a5c6":  1665,
				"a8a7":  1319,
				"a8b8":  1620,
				"a8c8":  1546,
				"a8d8":  1509,
				"b2a1b": 1346,
				"b2a1n": 1285,
				"b2a1q": 1478,
				"b2a1r": 1353,
				"b2b1b": 1340,
				"b2b1n": 1282,
				"b2b1q": 1559,
				"b2b1r": 1439,
				"b6a7":  1574,
				"b6c5":  203,
				"c7c6":  1527,
				"d7d5":  1603,
				"d7d6":  1567,
				"e8c8":  1495,
				"e8d8":  1439,
				"f6d5":  1598,
				"f6e4":  1468,
				"f6g4":  1456,
				"f6g8":  1381,
				"f6h5":  1412,
				"g6e4":  1581,
				"g6f5":  1622,
				"g6h5":  1488,
				"g7h6":  1288,
				"h8f8":  1446,
				"h8g8":  1419,
			},
		},
		{
			"r3k2r/Pppp1ppp/1b3nbN/nPB5/B1P1P3/5N2/qp1P2PP/R2Q1RK1 w kq - 0 2",
			2,
			map[string]int{
				"d2d3": 39,
				"g2g3": 39,
				"h2h3": 39,
				"e4e5": 42,
				"d2d4": 39,
				"g2g4": 39,
				"h2h4": 39,
				"f3e1": 39,
				"f3d4": 39,
				"f3h4": 39,
				"f3e5": 39,
				"f3g5": 39,
				"h6g4": 40,
				"h6f5": 39,
				"h6f7": 40,
				"h6g8": 39,
				"a4c2": 39,
				"a4b3": 38,
				"c5f2": 45,
				"g1f2": 39,
				"c5e3": 44,
				"g1h1": 39,
				"c5d4": 43,
				"c5b6": 41,
				"d1b3": 38,
				"d1e2": 39,
				"d1c2": 39,
				"a1b1": 31,
				"a1c1": 39,
				"a1a2": 29,
				"f1e1": 39,
				"f1f2": 39,
				"d1b1": 35,
				"d1c1": 43,
				"d1e1": 39,
			},
		},
		{
			"r3k2r/Pppp1ppp/1b3nbN/nPB5/B1P1P3/5N2/Rp1P2PP/3Q1RK1 b kq - 0 2",
			1,
			map[string]int{
				"a5b3":  1,
				"a5c4":  1,
				"a5c6":  1,
				"a8a7":  1,
				"a8b8":  1,
				"a8c8":  1,
				"a8d8":  1,
				"b2b1b": 1,
				"b2b1n": 1,
				"b2b1q": 1,
				"b2b1r": 1,
				"b6a7":  1,
				"b6c5":  1,
				"c7c6":  1,
				"d7d5":  1,
				"d7d6":  1,
				"e8c8":  1,
				"e8d8":  1,
				"f6d5":  1,
				"f6e4":  1,
				"f6g4":  1,
				"f6g8":  1,
				"f6h5":  1,
				"g6e4":  1,
				"g6f5":  1,
				"g6h5":  1,
				"g7h6":  1,
				"h8f8":  1,
				"h8g8":  1,
			},
		},
	}

	for i, tc := range cases {
		t.Run(fmt.Sprint(i), func(t *testing.T) {
			t.Parallel()
			p := fen.MustDecode(tc.in)
			got := encodeMoveMap(t, Divide(p, tc.depth))
			if diff := cmp.Diff(tc.want, got); diff != "" {
				t.Errorf("%q at depth %d: (-want +got)\n%s", tc.in, tc.depth, diff)
			}
		})
	}
}

func TestDivide_DepthNotPositive(t *testing.T) {
	p := core.NewPosition()
	if got := Divide(p, -1); got != nil {
		t.Errorf("depth -1: got non-nil %v", got)
	}
	if got := Divide(p, 0); got != nil {
		t.Errorf("depth 0: got non-nil %v", got)
	}
}
